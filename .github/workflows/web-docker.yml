name:  web docker build and publish

on:
  push:
    branches: [ main, website-iteration-july-2024 ]
    paths: ['software/web/**', '.github/**', 'infrastructure/**']

jobs:
  build-with-docker-engine:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

#      - uses: actions/setup-node@v3
#        with:
#          cache: 'npm'
#          cache-dependency-path: software/web/package-lock.json
#      - uses: actions/cache@v4
#        with:
#          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
#          path: |
#            ~/.npm
#            ${{ github.workspace }}/.next/cache
#          # Generate a new cache whenever packages or source files change.
#          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
#          # If source files changed but packages didn't, rebuild from a prior cache.
#          restore-keys: |
#            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
#
#
#      - name: 'Install Dependencies'
#        run: npm install
#        working-directory: './software/web'

#      - name: Derive appropriate SHAs for base and head for `nx affected` commands
#        uses: nrwl/nx-set-shas@v3

#      - name: 'Build images'
##        run: INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} npx nx affected --base=$NX_BASE --head=$NX_HEAD --target=container --parallel=2
#        run: npx nx container web
#        working-directory: './software/web'
#        env:
#          POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
#          POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
#          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          RHINOFIT_EMAIL: ${{ secrets.RHINOFIT_EMAIL }}
#          RHINOFIT_PASSWORD: ${{ secrets.RHINOFIT_PASSWORD }}
#          NEXT_PUBLIC_SHOW_ADMIN: true
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: loonison101/web:latest

#      - name: Retag
#        run: docker image tag web:main loonison101/web:latest
#
#      - name: push
#        run: docker push loonison101/web:latest