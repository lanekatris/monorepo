<div class="main container">
<h4>Actions</h4>
  <section>
    <details>
      <summary>Create Event</summary>
      <p>
        <div id="app"></div>
      </p>
    </details>
    <details>
      <summary>Upload Pixel Notes</summary>
      <p>
        <form method="post" action="/pixel-recorder-upload" enctype="multipart/form-data">
          <input type="file" name="files" multiple/>
          <input type="submit" />
        </form>
      </p>
    </details>
    <details>
      <summary id="notes-title">Notes Search</summary>
      <p>
        <label for="search-notes">Search: </label><input type="search" id="search-notes" />
        <ul id="search-notes-results"></ul>
      </p>
    </details>
  </section>

  <h4>Feed ({{events.length}})</h4>
  <ul class="feed">
    {{#each events}}
      <li>
        {{#if this.showDiscGolfIcon}}
          <img class="width-30" src="/frisbee-player-svgrepo-com.svg" />
        {{/if}}
        {{#if this.showNoteIcon}}
          <img class="width-30" src="/sticky-note-svgrepo-com.svg" />
        {{/if}}
        {{#if this.showFoodIcon}}
          <img class="width-30" src="/food-svgrepo-com.svg" />
        {{/if}}
        {{#if this.showMaitenance}}
          <img class="width-30" src="/wrench-svgrepo-com.svg" />
        {{/if}}
        {{#if this.showKid}}
          <img class="width-30" src="/baby-svgrepo-com.svg" />
        {{/if}}

        {{#if this.showMovie}}
          <img class="width-30" src="/movie-camera-svgrepo-com.svg"/>
        {{/if}}

        {{#if this.showVolleyball}}
          <img class="width-30" src="/volleyball-svgrepo-com.svg" />
        {{/if}}

        {{#if this.showConcert}}
          <img class="width-30" src="/music-svgrepo-com.svg" />
        {{/if}}

        {{#if this.showClimb}}
          <img class="width-30" src="/climbing-svgrepo-com.svg" />
        {{/if}}

        {{#if this.showSnowboarding}}
          <img class="width-30" src="/snowboard-silhouette-svgrepo-com.svg" />
        {{/if}}

        {{#if this.showGolf}}
          <img class="width-30" src="/golf-svgrepo-com.svg" />
        {{/if}}

        {{this.data.date}} - {{this.data.name}}{{this.data.body}}
        <form class="inline" method="post" action="/create-event">
          <input type="hidden" name="eventId" value="{{this.data.id}}" />
          <input type="hidden" name="eventName" value="event-deleted" />
          <input type="hidden" name="redirect" value="/home" />
          <a href="#" onclick="this.closest('form').submit();return false;">Delete</a>
        </form>
        <pre>{{this.eventName}}</pre>

      </li>
    {{/each}}
  </ul>
</div>
<script crossorigin src="/react.production.min.js"></script>
<script crossorigin src="/react-dom.production.min.js"></script>
<script src="/babel.min.js"></script>
<script src="/react-jsonschema-form.js"></script>
<script type="text/babel">
  const Form = JSONSchemaForm.default;
  const schema = {{{schema}}}
  const uiSchema = {
    body: {
      'ui:widget': 'textarea',
    },
  }

  const log = (type) => console.log.bind(console, type);

  console.log(schema)

  ReactDOM.render((
    <Form schema={schema} uiSchema={uiSchema}
          onChange={log("changed")}
          onSubmit={({formData}) => {
            const body = new URLSearchParams();
            Object.keys(formData).forEach(key => {
              body.append(key, formData[key])
            })

            fetch(`/create-event`, {
              method: 'post',
              body
            }).then(r => {
              console.log(r);
              window.location.reload()
            })
          }}
          onError={log("errors")} />
  ), document.getElementById("app"));
</script>

<script type="application/javascript">
  const searchResultsEl = document.getElementById('search-notes-results')
  const searchTitle = document.getElementById('notes-title')
  document.getElementById('search-notes').onkeyup = (e) => {
    console.log('notes search', e.target.value)
    // get results
    if (!e.target.value) {
      searchResultsEl.innerHTML = ''
      searchTitle.innerHTML = 'Notes Search'
      return;
    }

    fetch(`/notes/search?query=${e.target.value}`)
      .then(response => response.json())
      .then(response => {
        searchTitle.innerHTML = `Notes Search (${response.hits.length})`
        const searchRegex = new RegExp(e.target.value, 'g');
        searchResultsEl.innerHTML = response.hits.map((hit) => `<li>
          ${hit._source.body.replace(/\r\n/g, '<br />').replace(searchRegex, `<mark>${e.target.value}</mark>`)}
        </li>`).join('')
      })
  }
</script>
