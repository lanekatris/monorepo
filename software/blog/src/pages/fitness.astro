---
import Layout from '../layouts/BlogPost.astro'
import { sql } from '../content.config'
import { type ChartConfiguration, type ChartDataset } from 'chart.js'
import { renderGraph } from '../renderGraph'
import SimpleLineGraph from '../components/SimpleLineGraph.astro'

const activitiesPerYear = await sql`
    with x as (select *
               from markdown_file_models
               where file_path
        ilike '%/adventures/%')
       , y as (

    select file_date, date_part('year', file_date:: date) as year, file_path, replace(trim (split_part(file_path, file_date, 2)), '.md', '') activity
    from x
    order by file_date desc
        )

    select year, activity, count (*)
    from y
    group by year, activity
    order by year desc, activity
`

const activitiesPerYearMonth = (await sql`
    with x as (select replace(trim(split_part(file_path, file_date, 2)), '.md', '') activity,
                      date_part('year', file_date::date) as year, date_part('month', file_date:: date) as month, to_char(file_date:: date, 'Month') as month_name
    from markdown_file_models
    where file_path ilike '%/adventures/%')
    select year, trim (month_name) month_name, count (*)
    from x
    group by year, month, month_name
    order by year desc, month
`) as { year: number; month_name: string; count: string }[]

const allMonths = [
	'January',
	'February',
	'March',
	'April',
	'May',
	'June',
	'July',
	'August',
	'September',
	'October',
	'November',
	'December'
]
type GroupedData = {
	[year: number]: (number | null)[] // Each year maps to an array of 12 values (one per month, or null if no value exists)
}
// Process data dynamically
const datasets: ChartDataset[] = []
const groupedData: GroupedData = {}

// Group data by year
activitiesPerYearMonth.forEach((entry) => {
	if (!groupedData[entry.year]) {
		groupedData[entry.year] = Array(12).fill(null) // Initialize months with null
	}
	const monthIndex = allMonths.indexOf(entry.month_name)
	groupedData[entry.year][monthIndex] = +entry.count // Assign value to the correct month
})

// Generate datasets
Object.keys(groupedData).forEach((year, index) => {
	datasets.push({
		label: year,
		data: groupedData[+year],
		borderColor: `hsl(${(index * 60) % 360}, 70%, 50%)`, // Dynamic colors
		backgroundColor: `hsla(${(index * 60) % 360}, 70%, 50%, 0.2)`,
		borderWidth: 2,
		tension: 0.3,
		pointRadius: 5,
		pointBackgroundColor: `hsl(${(index * 60) % 360}, 70%, 50%)`
	})
})
const config: ChartConfiguration = {
	type: 'line',
	data: {
		// labels: activitiesPerYearMonth.filter((x) => x.year === 2025).map((x) => x.month_name),
		labels: allMonths,
		datasets: datasets
	},
	options: {
		responsive: true,
		plugins: {
			legend: {
				display: true,
				position: 'top'
			},
			tooltip: {
				mode: 'index',
				intersect: false
			}
		},
		interaction: {
			mode: 'nearest',
			axis: 'x',
			intersect: false
		},
		scales: {
			x: {
				title: {
					display: true,
					text: 'Month'
				}
			},
			y: {
				title: {
					display: true,
					text: 'Activity Count'
				},
				beginAtZero: true
			}
		}
	}
}

const coursesPerYearImageSmall = renderGraph(500, 800, config)
---

<Layout title="Fitness" pubDate={new Date('January 18 2025')}>
	<h1>Activities Per Month</h1>
	<figure>
		{coursesPerYearImageSmall}
		<figcaption>Activities Per Month</figcaption>
	</figure>
	<b>More</b>
	<details>
		<summary> Activities Per Year</summary>

		<table>
			<thead>
				<tr>
					<td>Year</td>
					<td>Activity</td>
					<td>Count</td>
				</tr>
			</thead>
			<tbody>
				{
					activitiesPerYear.map((item) => (
						<tr>
							<td>{item.year}</td>
							<td>{item.activity}</td>
							<td>{item.count}</td>
						</tr>
					))
				}
			</tbody>
		</table>
	</details>
	<h1>Body Weight</h1>
	<figure>
		<SimpleLineGraph
			label="Weight (lbs)"
			sql="select file_date date, weight count from models.body_weight order by file_date"
		/>
	</figure>
</Layout>
