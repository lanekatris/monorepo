---
import Layout from '../../layouts/BlogPost.astro'
import { getCollection } from 'astro:content'
import { renderGraph } from '../../renderGraph'
import { NOCO_DISCS, PRIMARY_COLOR } from '../../consts'
import { type ChartConfiguration } from 'chart.js'
import { type Scorecard, sql } from '../../content.config'

import winStreakImage from '../../../public/win-streak-green.svg'
import { Image } from 'astro:assets'
import { isDev, tagUrl } from '../../utils'

const initial: { [key: number]: number } = {}

const courses = await getCollection('discGolfCourses')
const stats: { [key: number]: number } = courses.reduce((prev, curr) => {
	prev[curr.data.yearEstablished] = (prev[curr.data.yearEstablished] || 0) + 1
	return prev
}, initial)

const discs = await getCollection('discs', (x) => x.data.status === 'In Bag')

const coursesPerYearConfig: ChartConfiguration = {
	type: 'line', // Chart type
	data: {
		labels: Object.keys(stats),
		datasets: [
			{
				label: 'New Courses',
				// backgroundColor: ['#ff6384', '#36a2eb', '#ffce56'],
				backgroundColor: [PRIMARY_COLOR], // todo: use the theme of my blog here
				data: Object.values(stats)
			}
		]
	},
	options: {
		responsive: false,
		plugins: {
			legend: { display: true }
		}
	}
}

const coursesPerYearImageSmall = renderGraph(400, 400, coursesPerYearConfig)
const coursesPerYearImageLarge = renderGraph(600, 1000, coursesPerYearConfig)

const lastUpdatedResults = await sql`select max(updated_at) last_updated
                                     from noco.disc`

const rounds = (await getCollection('feed')).reduce((acc: Scorecard[], x) => {
	if (x.data.type === 'scorecard' && x.data.data.scorecard) {
		acc.push(x.data.data.scorecard)
	}
	return acc
}, [])

console.log(rounds[0])
---

<Layout title="Disc Golf" pubDate={new Date('August 08 2021')}>
	<p>
		My favorite sport is disc golf! Since I'm a software engineer I have to show and analyze my disc
		golf data ðŸ˜‰
	</p>
	<p>Blog posts on the subject: <a href={tagUrl('disc-golf')}>#disc-golf</a></p>
	<p>
		<a href="/disc-golf/udisc-stat-previewer">View Your Udisc Stats</a>
	</p>

	<h1>Discs in my bag ({discs.length})</h1>
	<small
		>Last Updated: {lastUpdatedResults[0]['last_updated'].toLocaleDateString()}

		{
			isDev() && (
				<a target="_blank" href={NOCO_DISCS}>
					Edit Discs
				</a>
			)
		}
	</small>
	<p>
		The number in quotes is my unique

		<code>ID</code>
		I give to every disc.
	</p>
	{
		discs.map((disc) => (
			<div>
				({disc.id}) {disc.data.color} {disc.data.brand} {disc.data.model}
			</div>
		))
	}

	<h1>My Rounds ({rounds.length})</h1>
	<table style={{ marginTop: 0 }}>
		<caption>My Udisc Rounds</caption>
		<tfoot
			><tr>
				<th colspan="5">
					Shield generated from <a
						href="https://img.shields.io/badge/win-streak-green"
						target="_blank">here</a
					></th
				>
			</tr>
		</tfoot>
		<thead>
			<tr
				><th>Date</th>
				<th>Course</th>
				<th>Score</th>
				<th>Rating</th>
			</tr>
		</thead>
		<tbody>
			{
				rounds.map((round) => (
					<tr>
						<td>{round.startdate.toLocaleDateString()}</td>
						<td>
							{round.coursename}
							{round.new_course && <mark>New</mark>}
							<br />
							<small>{round.layoutname}</small>
						</td>
						<td style={{ color: round['+/-'] > 0 ? 'var(--error-color)' : 'green' }}>
							{round['+/-']} ({round.total})
							{round.streak && <Image src={winStreakImage} alt="Win Streak" />}
						</td>
						<td>{round.roundrating}</td>
					</tr>
				))
			}
		</tbody>
	</table>

	<h1>US Disc Golf Courses Stats</h1>
	<p>
		{courses.length.toLocaleString()} courses according to <a
			href="https://www.pdga.com/course-directory/advanced?order=field_course_year_established&sort=desc&page=1"
			>pdga.com</a
		>
	</p>

	<h3>New Courses Per Year</h3>

	{coursesPerYearImageSmall}

	<details>
		<summary>Bigger Graph</summary>

		{coursesPerYearImageLarge}
	</details>

	<details>
		<summary>New courses per year</summary>

		<table>
			<thead>
				<tr>
					<td>Year</td>
					<td>Course Count</td>
				</tr>
			</thead>
			<tbody>
				{
					Object.keys(stats).map((year) => (
						<tr>
							<td>{year}</td>
							<td>{stats[Number(year)]}</td>
						</tr>
					))
				}
			</tbody>
		</table>
	</details>
</Layout>
