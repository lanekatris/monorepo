#volumes:
#  homeassistant:

services:
  obsidian:
    image: lscr.io/linuxserver/obsidian:1.7.4
    container_name: obsidian
    security_opt:
      - seccomp:unconfined #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - /bigboy/obsidian/config:/config
    ports:
      - "4445:3000"
    devices:
      - /dev/dri:/dev/dri
    shm_size: "1gb"
    restart: unless-stopped
  lkat:
    image: loonison101/lk:main
    restart: unless-stopped
#    pull_policy: always
    ports:
      - "4444:8080"
    command: ['server']

  web:
    image: loonison101/web
    container_name: web
    restart: unless-stopped
    pull_policy: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3333:3000"
    env_file:
      - .env
#  web-restarter:
#    image: docker:cli
#    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
#    command: ["/bin/sh", "-c", "while true; do sleep 30m; docker restart web; done"]
#    restart: unless-stopped
#watchtower:
#    image: containrrr/watchtower
#    command: web --interval 1800 --debug
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock

  nocodb:
    image: nocodb/nocodb:0.255.0
    ports:
      - "8080:8080"
    restart: unless-stopped
    volumes:
      - /home/lane/nocodb:/usr/app/data/  
#  homeassistant:
#    image: ghcr.io/home-assistant/home-assistant:stable
#    environment:
#      - TZ=US/Eastern
#    ports:
#      - 8123:8123
#    volumes:
#      - homeassistant:/config
#    restart: unless-stopped
  paste:
    image: danielszabo99/microbin
    restart: unless-stopped
    environment:
      - MICROBIN_PRIVATE=false
      - MICROBIN_PUBLIC_PATH=https://paste.lkat.io
      - MICROBIN_QR=true
      - MICROBIN_HIGHLIGHTSYNTAX=true
      - MICROBIN_ADMIN_USERNAME=${MICROBIN_USERNAME}
      - MICROBIN_ADMIN_PASSWORD=${MICROBIN_SECRET}
      - MICROBIN_ENCRYPTION_CLIENT_SIDE=false
      - MICROBIN_ENCRYPTION_SERVER_SIDE=true
      - MICROBIN_TITLE=Microbin
      - MICROBIN_QR=True
      - MICROBIN_HIDE_FOOTER=True
      - MICROBIN_WIDE=true
      - MICROBIN_ENABLE_READONLY=true
    ports:
      - "8065:8080"
    volumes:
      - /home/lane/microbin:/my/microbin
      - /home/lane/microbin/data:/app/pasta_data
  memos:
    image: neosmemo/memos:0.22.4
    restart: unless-stopped
    ports:
      - "5230:5230"
    volumes:
      - /home/lane/memos:/var/opt/memos
  minio:
    image: quay.io/minio/minio
    restart: unless-stopped
    command: ["server", "/data", "--console-address", ":9001"]
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - /bigboy/minio:/data


  kestra-postgres:
    image: postgres:15
    restart: always
    volumes:
      - /home/lane/kestra-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: ${KESTRA_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10

  kestra:
    image: kestra/kestra:latest-full
    restart: always
    #pull_policy: always
    entrypoint: /bin/bash
    # Note that this is meant for development only. Refer to the documentation for production deployments of Kestra which runs without a root user.
    user: "root"
    command:
      - -c
      - /app/kestra server standalone --worker-thread=128
    volumes:
      - /home/lane/kestra-data:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://kestra-postgres:5432/kestra
            driverClassName: org.postgresql.Driver
            username: kestra
            password: ${KESTRA_PASSWORD}
        kestra:
          server:
            basic-auth:
              enabled: false
              username: admin
              password: kestra
          repository:
            type: postgres
          storage:
            type: local
            local:
              base-path: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmp-dir:
              path: /tmp/kestra-wd/tmp
          url: http://localhost:8080/
    ports:
      - "8090:8080"
      - "8091:8081"
    depends_on:
      kestra-postgres:
        condition: service_started
